import torch, torch.nn as nn, torch.optim as optim, torchvision, torchvision.transforms as transforms
import matplotlib.pyplot as plt, numpy as np
from torchvision.utils import make_grid

torch.manual_seed(42)

latent_dim, hidden_dim, image_dim = 100, 256, 784
num_epochs, batch_size, lr, beta1 = 50, 64, 0.0002, 0.5
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize([0.5], [0.5])])
train_dataset = torchvision.datasets.MNIST(root='./data', train=True, transform=transform, download=True)
train_loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)

class Generator(nn.Module):
    def __init__(self):
        super(Generator, self).__init__()
        self.model = nn.Sequential(
            nn.Linear(latent_dim, hidden_dim),
            nn.ReLU(),
            nn.Linear(hidden_dim, hidden_dim),
            nn.ReLU(),
            nn.Linear(hidden_dim, image_dim),
            nn.Tanh()
        )

    def forward(self, z):
        img = self.model(z)
        return img.view(img.size(0), 1, 28, 28)

class Discriminator(nn.Module):
    def __init__(self):
        super(Discriminator, self).__init__()
        self.model = nn.Sequential(
            nn.Linear(image_dim, hidden_dim),
            nn.LeakyReLU(0.2),
            nn.Linear(hidden_dim, hidden_dim),
            nn.LeakyReLU(0.2),
            nn.Linear(hidden_dim, 1),
            nn.Sigmoid()
        )

    def forward(self, img):
        img_flat = img.view(img.size(0), -1)
        return self.model(img_flat)

generator, discriminator = Generator().to(device), Discriminator().to(device)
adversarial_loss = nn.BCELoss()

g_optimizer = optim.Adam(generator.parameters(), lr=lr, betas=(beta1, 0.999))
d_optimizer = optim.Adam(discriminator.parameters(), lr=lr, betas=(beta1, 0.999))

for epoch in range(num_epochs):
    for i, (imgs, _) in enumerate(train_loader):
        batch_size = imgs.size(0)
        real_label, fake_label = torch.ones(batch_size, 1).to(device), torch.zeros(batch_size, 1).to(device)

        d_optimizer.zero_grad()
        real_imgs = imgs.to(device)
        real_validity = discriminator(real_imgs)
        d_real_loss = adversarial_loss(real_validity, real_label)

        z = torch.randn(batch_size, latent_dim).to(device)
        fake_imgs = generator(z)
        fake_validity = discriminator(fake_imgs.detach())
        d_fake_loss = adversarial_loss(fake_validity, fake_label)

        d_loss = (d_real_loss + d_fake_loss) / 2
        d_loss.backward()
        d_optimizer.step()

        g_optimizer.zero_grad()
        fake_validity = discriminator(fake_imgs)
        g_loss = adversarial_loss(fake_validity, real_label)
        g_loss.backward()
        g_optimizer.step()

        if i % 200 == 0:
            print(f"[Epoch {epoch}/{num_epochs}] [Batch {i}/{len(train_loader)}] D_loss: {d_loss.item():.4f}, G_loss: {g_loss.item():.4f}")

    if epoch % 10 == 0:
        with torch.no_grad():
            fake_imgs = generator(torch.randn(16, latent_dim).to(device))
            fake_imgs = fake_imgs.cpu()
            grid = make_grid(fake_imgs, nrow=4, normalize=True)

            plt.figure(figsize=(6, 6))
            plt.imshow(np.transpose(grid, (1, 2, 0)))
            plt.axis('off')
            plt.title(f'Generated Digits at Epoch {epoch}')
            plt.savefig(f'generated_digits_epoch_{epoch}.png')
            plt.close()

torch.save(generator.state_dict(), 'generator.pth')

with torch.no_grad():
    final_samples = generator(torch.randn(16, latent_dim).to(device))
    final_samples = final_samples.cpu()
    grid = make_grid(final_samples, nrow=4, normalize=True)

    plt.figure(figsize=(6, 6))
    plt.imshow(np.transpose(grid, (1, 2, 0)))
    plt.axis('off')
    plt.title('Final Generated Digits')
    plt.savefig('final_generated_digits.png')
    plt.show()
